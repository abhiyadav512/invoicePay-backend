// This is your Prisma schema file,
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  dob               DateTime?
  location          String?
  number            String?
  isVerified        Boolean   @default(false)
  resetToken        String?
  resetTokenExpires DateTime?
  invoices          Invoice[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  business Business?

  @@index([email])
  @@index([isVerified])
  @@index([email, isVerified]) // Composite index for faster filtering
}

model Business {
  id String @id @default(uuid())

  name        String
  description String?
  website     String?
  phone       String?
  email       String?

  number String?

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @unique

  address    String?
  city       String?
  state      String?
  country    String? @default("India")
  postalCode String?

  businessType String?
  taxId        String?
  logo         String?

  defaultCurrency String    @default("INR")
  timezone        String    @default("Asia/Kolkata")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Invoice         Invoice[]

  @@index([ownerId])
  @@index([name])
}

model OtpRequest {
  id           String   @id @default(ulid())
  email        String   @unique
  name         String
  password     String
  otpHash      String
  otpExpiresAt DateTime
  createdAt    DateTime @default(now())
}

model Invoice {
  id     String @id @default(ulid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  invoiceNumber Int
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId    String

  paidDate              DateTime?
  stripeSessionId       String?
  stripePaymentIntentId String?
  paymentMethod         String?
  metadata              Json?

  clientName    String
  clientEmail   String
  currency      String        @default("INR")
  total         Int
  status        InvoiceStatus @default(UNPAID)
  dueDate       DateTime
  paymentLink   String?
  paymentLinkId String?
  pdfUrl        String?
  pdfPublicId   String?
  items         InvoiceItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([businessId])
  @@index([status])
  @@index([dueDate])
  @@index([clientEmail])
  @@index([createdAt])
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  description String
  quantity    Int     @default(1)
  amount      Int
}

enum InvoiceStatus {
  UNPAID
  PAID
  OVERDUE
  FAILED
}
